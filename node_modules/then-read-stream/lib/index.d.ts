/// <reference types="node" />
import { Promise } from "bluebird";
import * as stream from "stream";
/**
 * Error message
 */
export declare const endOfStream = "End-Of-Stream";
export declare class StreamReader {
    private s;
    /**
     * Deferred read request
     */
    private request;
    private endOfStream;
    /**
     * Store peeked data
     * @type {Array}
     */
    private peekQueue;
    constructor(s: stream.Readable);
    /**
     * Read ahead from stream. Subsequent read will return the same data
     * @param buffer Buffer to store data read from stream in
     * @param offset Offset buffer
     * @param length Number of bytes to read
     * @param position
     * @returns {any}
     */
    peek(buffer: Buffer | Uint8Array, offset: number, length: number): Promise<number>;
    /**
     * Read chunk from stream
     * @param buffer Buffer to store data read from stream in
     * @param offset Offset buffer
     * @param length Number of bytes to read
     * @returns {any}
     */
    read(buffer: Buffer | Uint8Array, offset: number, length: number): Promise<number>;
    /**
     * Read chunk from stream
     * @param buffer Buffer to store data read from stream in
     * @param offset Offset buffer
     * @param length Number of bytes to read
     * @returns {any}
     */
    private _read(buffer, offset, length);
    private tryRead();
}
